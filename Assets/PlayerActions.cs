//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""DefaultMovement"",
            ""id"": ""388183df-2b1e-47b1-8532-b814cdb26e21"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3d699b7e-cfb1-47cd-acdf-91fda5110e0f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""16cf02d4-0d16-4c23-ae84-3ad46a27768c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""e2af6981-6991-4242-9dcc-b21daa71c3e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""6932884b-ff25-44c2-8810-6b8389312eaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""e21231c7-2a4a-4975-8dc3-1f0145cf794b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""7fc414ca-2c4a-495f-98ac-63f7c7b78cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickupItem"",
                    ""type"": ""Button"",
                    ""id"": ""2c5205f4-c301-4451-ae36-9ed9f0df40a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""ecf015fd-7faa-4759-8a88-f2730664863f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Targeting"",
                    ""type"": ""Value"",
                    ""id"": ""87940b78-2bb4-473e-a5ca-4edff4d8777a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""4b203f97-6cd1-45ac-9547-9d2cde8c8c92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD keys"",
                    ""id"": ""a082d9ae-a5b4-470c-84f0-dfa061922258"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c7c4365-6405-4fe9-b6d7-c280c811fd8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""194209a3-21c4-4a4d-881b-3ee4cb9c70dc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b524466-4cb5-4a73-8445-3a26962f1411"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e4e8aba-9c9f-44a8-a3c0-7bde8a556ad0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99c10e22-ebaa-44e0-a8c3-84c78522d364"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03d5a67a-99f9-416d-a6d9-28b1e54b7117"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d071146f-f4c4-45b0-8a42-e78d0006ccb7"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""951e2837-1e6d-4dda-a173-ee0778777504"",
                    ""path"": ""<DualShockGamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd175381-f3dc-407c-a970-88864800786f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3eb0282-4a6c-4781-9adc-de8332d84689"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c63d6b84-e0d5-45b6-bb5d-3f7862c94796"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51342799-ee75-4355-9df8-e60f58cba961"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4ec5cfe-44da-41b1-9954-691f131020cd"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e00f4d4-bcea-409d-9c28-f0c4a92406ad"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2ecbc19-0256-4549-ab17-aec3e2506dd4"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26dc0836-3f55-43fd-9703-7b1f407195df"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""PickupItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a147bf8a-9ac9-4d9a-b0e1-0de7b418b110"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PickupItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""830e1c9a-9862-4bab-8888-9adc736643e0"",
                    ""path"": ""<DualShockGamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""661ac449-cee3-4e2a-9f9b-78ac1a8b9586"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e849a160-47cc-4751-94c5-308ac273892f"",
                    ""path"": ""<DualShockGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Targeting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e19e453-a64c-41a8-a472-a1e872b20283"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Targeting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c01793b-d65d-497a-8b53-35874523ecff"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""ed2bb15a-fdad-4742-9289-e597437f2462"",
            ""actions"": [
                {
                    ""name"": ""LeftInventory"",
                    ""type"": ""Button"",
                    ""id"": ""09eac522-eb85-4c29-bca3-fa2cb5f1cb84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f2d3760-47f3-41d8-9be4-b2cc8d173e25"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b43003b-03b3-4758-b3a9-68e517fafd4e"",
                    ""path"": ""<DualShockGamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""LeftInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UnderBed"",
            ""id"": ""aafdb493-b982-44b0-9fdd-8ecdc1566283"",
            ""actions"": [
                {
                    ""name"": ""EndAction"",
                    ""type"": ""Button"",
                    ""id"": ""009ad5eb-b68f-41ba-b456-e0494b4bbd74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfae42c8-3d6e-4aa4-83b8-b6f2a3b16dc4"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EndAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""890d0c2b-6909-4f02-a592-44b7c37f3958"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Console"",
                    ""action"": ""EndAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Console"",
            ""bindingGroup"": ""Console"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DefaultMovement
        m_DefaultMovement = asset.FindActionMap("DefaultMovement", throwIfNotFound: true);
        m_DefaultMovement_Movement = m_DefaultMovement.FindAction("Movement", throwIfNotFound: true);
        m_DefaultMovement_Attack = m_DefaultMovement.FindAction("Attack", throwIfNotFound: true);
        m_DefaultMovement_Run = m_DefaultMovement.FindAction("Run", throwIfNotFound: true);
        m_DefaultMovement_Interaction = m_DefaultMovement.FindAction("Interaction", throwIfNotFound: true);
        m_DefaultMovement_Dodge = m_DefaultMovement.FindAction("Dodge", throwIfNotFound: true);
        m_DefaultMovement_Crouch = m_DefaultMovement.FindAction("Crouch", throwIfNotFound: true);
        m_DefaultMovement_PickupItem = m_DefaultMovement.FindAction("PickupItem", throwIfNotFound: true);
        m_DefaultMovement_Inventory = m_DefaultMovement.FindAction("Inventory", throwIfNotFound: true);
        m_DefaultMovement_Targeting = m_DefaultMovement.FindAction("Targeting", throwIfNotFound: true);
        m_DefaultMovement_Throw = m_DefaultMovement.FindAction("Throw", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_LeftInventory = m_Inventory.FindAction("LeftInventory", throwIfNotFound: true);
        // UnderBed
        m_UnderBed = asset.FindActionMap("UnderBed", throwIfNotFound: true);
        m_UnderBed_EndAction = m_UnderBed.FindAction("EndAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMovement
    private readonly InputActionMap m_DefaultMovement;
    private IDefaultMovementActions m_DefaultMovementActionsCallbackInterface;
    private readonly InputAction m_DefaultMovement_Movement;
    private readonly InputAction m_DefaultMovement_Attack;
    private readonly InputAction m_DefaultMovement_Run;
    private readonly InputAction m_DefaultMovement_Interaction;
    private readonly InputAction m_DefaultMovement_Dodge;
    private readonly InputAction m_DefaultMovement_Crouch;
    private readonly InputAction m_DefaultMovement_PickupItem;
    private readonly InputAction m_DefaultMovement_Inventory;
    private readonly InputAction m_DefaultMovement_Targeting;
    private readonly InputAction m_DefaultMovement_Throw;
    public struct DefaultMovementActions
    {
        private @PlayerActions m_Wrapper;
        public DefaultMovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DefaultMovement_Movement;
        public InputAction @Attack => m_Wrapper.m_DefaultMovement_Attack;
        public InputAction @Run => m_Wrapper.m_DefaultMovement_Run;
        public InputAction @Interaction => m_Wrapper.m_DefaultMovement_Interaction;
        public InputAction @Dodge => m_Wrapper.m_DefaultMovement_Dodge;
        public InputAction @Crouch => m_Wrapper.m_DefaultMovement_Crouch;
        public InputAction @PickupItem => m_Wrapper.m_DefaultMovement_PickupItem;
        public InputAction @Inventory => m_Wrapper.m_DefaultMovement_Inventory;
        public InputAction @Targeting => m_Wrapper.m_DefaultMovement_Targeting;
        public InputAction @Throw => m_Wrapper.m_DefaultMovement_Throw;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMovementActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultMovementActions instance)
        {
            if (m_Wrapper.m_DefaultMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnMovement;
                @Attack.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnAttack;
                @Run.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnRun;
                @Interaction.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInteraction;
                @Dodge.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnDodge;
                @Crouch.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnCrouch;
                @PickupItem.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnPickupItem;
                @PickupItem.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnPickupItem;
                @PickupItem.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnPickupItem;
                @Inventory.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnInventory;
                @Targeting.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnTargeting;
                @Targeting.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnTargeting;
                @Targeting.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnTargeting;
                @Throw.started -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_DefaultMovementActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_DefaultMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @PickupItem.started += instance.OnPickupItem;
                @PickupItem.performed += instance.OnPickupItem;
                @PickupItem.canceled += instance.OnPickupItem;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Targeting.started += instance.OnTargeting;
                @Targeting.performed += instance.OnTargeting;
                @Targeting.canceled += instance.OnTargeting;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public DefaultMovementActions @DefaultMovement => new DefaultMovementActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_LeftInventory;
    public struct InventoryActions
    {
        private @PlayerActions m_Wrapper;
        public InventoryActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftInventory => m_Wrapper.m_Inventory_LeftInventory;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @LeftInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftInventory;
                @LeftInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftInventory;
                @LeftInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftInventory;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftInventory.started += instance.OnLeftInventory;
                @LeftInventory.performed += instance.OnLeftInventory;
                @LeftInventory.canceled += instance.OnLeftInventory;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // UnderBed
    private readonly InputActionMap m_UnderBed;
    private IUnderBedActions m_UnderBedActionsCallbackInterface;
    private readonly InputAction m_UnderBed_EndAction;
    public struct UnderBedActions
    {
        private @PlayerActions m_Wrapper;
        public UnderBedActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @EndAction => m_Wrapper.m_UnderBed_EndAction;
        public InputActionMap Get() { return m_Wrapper.m_UnderBed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnderBedActions set) { return set.Get(); }
        public void SetCallbacks(IUnderBedActions instance)
        {
            if (m_Wrapper.m_UnderBedActionsCallbackInterface != null)
            {
                @EndAction.started -= m_Wrapper.m_UnderBedActionsCallbackInterface.OnEndAction;
                @EndAction.performed -= m_Wrapper.m_UnderBedActionsCallbackInterface.OnEndAction;
                @EndAction.canceled -= m_Wrapper.m_UnderBedActionsCallbackInterface.OnEndAction;
            }
            m_Wrapper.m_UnderBedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EndAction.started += instance.OnEndAction;
                @EndAction.performed += instance.OnEndAction;
                @EndAction.canceled += instance.OnEndAction;
            }
        }
    }
    public UnderBedActions @UnderBed => new UnderBedActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ConsoleSchemeIndex = -1;
    public InputControlScheme ConsoleScheme
    {
        get
        {
            if (m_ConsoleSchemeIndex == -1) m_ConsoleSchemeIndex = asset.FindControlSchemeIndex("Console");
            return asset.controlSchemes[m_ConsoleSchemeIndex];
        }
    }
    public interface IDefaultMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnPickupItem(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnTargeting(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnLeftInventory(InputAction.CallbackContext context);
    }
    public interface IUnderBedActions
    {
        void OnEndAction(InputAction.CallbackContext context);
    }
}
